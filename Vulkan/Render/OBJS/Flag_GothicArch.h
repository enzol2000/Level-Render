// "Flag_GothicArch.h" generated by "Obj2Header.exe" [Version 1.9d] Author: L.Norri Fullsail University.
// Data is converted to left-handed coordinate system and UV data is V flipped for Direct3D/Vulkan.
// The companion file "Flag_GothicArch.h2b" is a binary dump of this format(-padding) for more flexibility.
// Loading *.h2b: read version, sizes, handle strings(max len 260) by reading until null-terminated.
/***********************/
/*  Generator version  */
/***********************/
#ifndef _Flag_GothicArch_version_
const char Flag_GothicArch_version[4] = { '0','1','9','d' };
#define _Flag_GothicArch_version_
#endif
/************************************************/
/*  This section contains the model's size data */
/************************************************/
#ifndef _Flag_GothicArch_vertexcount_
const unsigned Flag_GothicArch_vertexcount = 159;
#define _Flag_GothicArch_vertexcount_
#endif
#ifndef _Flag_GothicArch_indexcount_
const unsigned Flag_GothicArch_indexcount = 432;
#define _Flag_GothicArch_indexcount_
#endif
#ifndef _Flag_GothicArch_materialcount_
const unsigned Flag_GothicArch_materialcount = 1; // can be used for batched draws
#define _Flag_GothicArch_materialcount_
#endif
#ifndef _Flag_GothicArch_meshcount_
const unsigned Flag_GothicArch_meshcount = 1;
#define _Flag_GothicArch_meshcount_
#endif
/************************************************/
/*  This section contains the raw data to load  */
/************************************************/
#ifndef __OBJ_VEC3__
typedef struct _OBJ_VEC3_
{
	float x,y,z; // 3D Coordinate.
}OBJ_VEC3;
#define __OBJ_VEC3__
#endif
#ifndef __OBJ_VERT__
typedef struct _OBJ_VERT_
{
	OBJ_VEC3 pos; // Left-handed +Z forward coordinate w not provided, assumed to be 1.
	OBJ_VEC3 uvw; // D3D/Vulkan style top left 0,0 coordinate.
	OBJ_VEC3 nrm; // Provided direct from obj file, may or may not be normalized.
}OBJ_VERT;
#define __OBJ_VERT__
#endif
#ifndef _Flag_GothicArch_vertices_
// Raw Vertex Data follows: Positions, Texture Coordinates and Normals.
const OBJ_VERT Flag_GothicArch_vertices[159] =
{
	{	{ -0.939741f, 3.262032f, -0.183461f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.704100f, 0.710100f, -0.000700f }	},
	{	{ -1.105784f, 3.092098f, -0.193851f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.714900f, 0.699200f, -0.001100f }	},
	{	{ -1.106277f, 3.092030f, 0.006105f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.714900f, 0.699200f, -0.001100f }	},
	{	{ -0.940349f, 3.261646f, 0.056483f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.702300f, 0.711900f, -0.000600f }	},
	{	{ -0.806240f, 3.372109f, -0.193851f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.621100f, 0.783700f, 0.000900f }	},
	{	{ -0.912068f, 3.288833f, -0.193851f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.653300f, 0.757100f, 0.000300f }	},
	{	{ -0.912766f, 3.288197f, 0.089084f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.647900f, 0.761700f, 0.000400f }	},
	{	{ -0.806879f, 3.371164f, 0.064945f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.621200f, 0.783600f, 0.000900f }	},
	{	{ -0.384814f, 2.539146f, -0.183461f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.025200f, 0.059800f, -0.997900f }	},
	{	{ -0.521092f, 2.435064f, -0.193851f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.029200f, 0.055200f, -0.998000f }	},
	{	{ -0.747733f, 2.580036f, -0.193851f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.037500f, 0.036200f, -0.998600f }	},
	{	{ -0.597975f, 2.697261f, -0.183461f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.036900f, 0.038700f, -0.998600f }	},
	{	{ -0.342326f, 2.645878f, -0.193851f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.025100f, -0.042500f, -0.998800f }	},
	{	{ -0.384814f, 2.539146f, -0.183461f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.041100f, -0.083400f, -0.995700f }	},
	{	{ -0.597975f, 2.697261f, -0.183461f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.063200f, -0.072100f, -0.995400f }	},
	{	{ -0.537661f, 2.792719f, -0.193851f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.034200f, -0.037200f, -0.998700f }	},
	{	{ 0.220015f, 2.563355f, -0.193851f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.000000f, -1.000000f }	},
	{	{ 0.082023f, 2.551819f, -0.193851f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.000000f, -1.000000f }	},
	{	{ 0.080625f, 2.680856f, -0.193851f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.000000f, -1.000000f }	},
	{	{ 0.208499f, 2.695072f, -0.193851f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.000000f, -1.000000f }	},
	{	{ -0.082023f, 2.710226f, -0.193851f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.000000f, -1.000000f }	},
	{	{ -0.082023f, 2.551818f, -0.193851f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.000000f, -1.000000f }	},
	{	{ -0.226728f, 2.578460f, -0.193851f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.020300f, -0.080700f, -0.996500f }	},
	{	{ -0.205564f, 2.739823f, -0.193851f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.000000f, -1.000000f }	},
	{	{ 0.230570f, 2.522354f, -0.183461f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.070400f, -0.224500f, -0.971900f }	},
	{	{ 0.082034f, 2.508288f, -0.183461f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.010200f, -0.234100f, -0.972200f }	},
	{	{ 0.082023f, 2.551819f, -0.193851f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.010800f, -0.234200f, -0.972100f }	},
	{	{ 0.220015f, 2.563355f, -0.193851f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.074100f, -0.223600f, -0.971900f }	},
	{	{ -0.330489f, 2.792107f, -0.193851f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.000000f, -1.000000f }	},
	{	{ -0.464999f, 2.866661f, -0.193851f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.000000f, -1.000000f }	},
	{	{ -0.283932f, 2.900395f, -0.203408f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.000000f, -1.000000f }	},
	{	{ -0.315712f, 2.802353f, -0.203408f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.000000f, -1.000000f }	},
	{	{ -0.444421f, 2.885935f, -0.203408f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.000000f, -1.000000f }	},
	{	{ -0.381313f, 2.948852f, -0.203408f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.000000f, -1.000000f }	},
	{	{ -0.570445f, 2.976655f, -0.193851f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.000000f, -1.000000f }	},
	{	{ -0.645897f, 2.898285f, -0.193851f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.058600f, -0.041700f, -0.997400f }	},
	{	{ -0.912068f, 3.288833f, -0.193851f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.000000f, -1.000000f }	},
	{	{ -0.806240f, 3.372109f, -0.193851f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.000000f, -1.000000f }	},
	{	{ -0.263250f, 2.887355f, -0.203408f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.000000f, -1.000000f }	},
	{	{ -0.185753f, 2.859599f, -0.203408f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.000000f, -1.000000f }	},
	{	{ -0.200678f, 2.769362f, -0.203408f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.000000f, -1.000000f }	},
	{	{ -0.262670f, 2.572763f, -0.191208f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.054900f, -0.114200f, -0.991900f }	},
	{	{ -0.319452f, 2.605879f, -0.191208f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.042400f, -0.092800f, -0.994800f }	},
	{	{ -0.235605f, 2.505571f, -0.183461f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.005300f, 0.078000f, -0.996900f }	},
	{	{ -0.388111f, 2.382234f, -0.193851f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.015100f, 0.069800f, -0.997400f }	},
	{	{ -0.700987f, 2.841589f, -0.185073f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.102800f, -0.076400f, -0.991800f }	},
	{	{ -0.939741f, 3.262032f, -0.183461f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.141500f, -0.086100f, -0.986200f }	},
	{	{ -0.912068f, 3.288833f, -0.193851f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.141500f, -0.086100f, -0.986200f }	},
	{	{ 1.081809f, 3.120957f, 0.102243f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.712800f, 0.701400f, -0.001900f }	},
	{	{ 1.080873f, 3.121086f, -0.193851f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.712800f, 0.701400f, -0.001900f }	},
	{	{ 0.927419f, 3.277071f, -0.184274f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.704200f, 0.710000f, -0.002300f }	},
	{	{ 0.915340f, 3.290172f, 0.112634f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.704500f, 0.709700f, -0.002300f }	},
	{	{ 0.887601f, 3.316661f, 0.102243f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.658100f, 0.752900f, -0.002200f }	},
	{	{ 0.886665f, 3.316790f, -0.193851f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.652000f, 0.758200f, -0.002100f }	},
	{	{ 0.768699f, 3.408119f, -0.198502f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.612300f, 0.790600f, -0.001600f }	},
	{	{ 0.781567f, 3.398752f, 0.102243f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.612300f, 0.790600f, -0.001600f }	},
	{	{ 0.590856f, 2.595890f, -0.189357f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.029200f, 0.038000f, -0.998800f }	},
	{	{ 0.560823f, 2.613910f, -0.185957f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.023900f, 0.031100f, -0.999200f }	},
	{	{ 0.614350f, 2.770874f, -0.183461f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.032700f, 0.032200f, -0.998900f }	},
	{	{ 0.771689f, 2.595359f, -0.193851f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.034600f, 0.035100f, -0.998800f }	},
	{	{ 0.614350f, 2.770874f, -0.183461f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.143400f, -0.182200f, -0.972700f }	},
	{	{ 0.369865f, 2.603428f, -0.183461f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.131800f, -0.209400f, -0.968900f }	},
	{	{ 0.350562f, 2.640336f, -0.193851f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.132700f, -0.209200f, -0.968800f }	},
	{	{ 0.590405f, 2.801593f, -0.193851f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.143400f, -0.181800f, -0.972800f }	},
	{	{ -0.082033f, 2.508288f, -0.183461f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000100f, 0.082400f, -0.996600f }	},
	{	{ -0.118196f, 2.380131f, -0.193851f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000100f, 0.082400f, -0.996600f }	},
	{	{ -0.082023f, 2.551818f, -0.193851f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.007400f, -0.202000f, -0.979400f }	},
	{	{ -0.082033f, 2.508288f, -0.183461f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.007000f, -0.203300f, -0.979100f }	},
	{	{ -0.235605f, 2.505571f, -0.183461f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.027700f, -0.149300f, -0.988400f }	},
	{	{ 0.466010f, 2.930132f, -0.203408f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.000000f, -1.000000f }	},
	{	{ 0.334290f, 2.808259f, -0.203408f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.000000f, -1.000000f }	},
	{	{ 0.320805f, 2.911750f, -0.203408f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.000000f, -1.000000f }	},
	{	{ 0.405963f, 2.963967f, -0.203408f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.000000f, -1.000000f }	},
	{	{ 0.886665f, 3.316790f, -0.193851f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.012000f, -0.011200f, -0.999900f }	},
	{	{ 0.654713f, 2.872642f, -0.193851f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.005500f, -0.005200f, -1.000000f }	},
	{	{ 0.553554f, 2.961207f, -0.193851f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.006600f, -0.006200f, -1.000000f }	},
	{	{ 0.768699f, 3.408119f, -0.198502f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.012000f, -0.011200f, -0.999900f }	},
	{	{ 0.590405f, 2.801593f, -0.193851f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.000000f, -1.000000f }	},
	{	{ 0.350562f, 2.640336f, -0.193851f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.000000f, -1.000000f }	},
	{	{ 0.338391f, 2.732271f, -0.193851f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.000000f, -1.000000f }	},
	{	{ 0.495917f, 2.884318f, -0.193851f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.000000f, -1.000000f }	},
	{	{ 0.206139f, 2.747923f, -0.203408f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.000000f, -1.000000f }	},
	{	{ 0.185753f, 2.859599f, -0.203408f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.000000f, -1.000000f }	},
	{	{ 0.927419f, 3.277071f, -0.184274f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.153000f, -0.079800f, -0.985000f }	},
	{	{ 0.707846f, 2.845913f, -0.183461f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.150100f, -0.112700f, -0.982200f }	},
	{	{ 0.654713f, 2.872642f, -0.193851f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.149300f, -0.122000f, -0.981200f }	},
	{	{ 0.886665f, 3.316790f, -0.193851f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.153000f, -0.079800f, -0.985000f }	},
	{	{ -0.082023f, 2.839832f, -0.203408f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.000000f, -1.000000f }	},
	{	{ 0.082023f, 2.839832f, -0.203408f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.000000f, -1.000000f }	},
	{	{ 0.082023f, 2.725560f, -0.203408f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.000000f, -1.000000f }	},
	{	{ -0.073632f, 2.738147f, -0.203408f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.000000f, -1.000000f }	},
	{	{ -0.082033f, 2.508288f, -0.183461f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.022300f, 0.058600f, -0.998000f }	},
	{	{ 0.082034f, 2.508288f, -0.183461f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.004900f, 0.051900f, -0.998600f }	},
	{	{ 0.131038f, 2.250355f, -0.193851f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.001400f, 0.049500f, -0.998800f }	},
	{	{ -0.072297f, 2.389982f, -0.193851f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.022300f, 0.058600f, -0.998000f }	},
	{	{ 0.388111f, 2.382234f, -0.193851f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.019800f, 0.046000f, -0.998700f }	},
	{	{ 0.230570f, 2.522354f, -0.183461f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.018200f, 0.044000f, -0.998900f }	},
	{	{ 0.768699f, 3.408119f, -0.198502f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.224300f, -0.119700f, -0.967100f }	},
	{	{ 0.553554f, 2.961207f, -0.193851f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.177300f, -0.123700f, -0.976400f }	},
	{	{ 0.529087f, 2.998859f, -0.203408f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.196000f, -0.122200f, -0.973000f }	},
	{	{ 0.756112f, 3.417863f, -0.203407f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.224300f, -0.119700f, -0.967100f }	},
	{	{ 0.756112f, 3.417863f, -0.203407f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.612300f, 0.790600f, -0.001600f }	},
	{	{ 0.771303f, 3.406699f, 0.102243f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.612300f, 0.790600f, -0.001600f }	},
	{	{ -0.547091f, 2.998836f, -0.203408f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.334700f, -0.208800f, -0.918900f }	},
	{	{ -0.570445f, 2.976655f, -0.193851f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.334700f, -0.208800f, -0.918900f }	},
	{	{ -0.806240f, 3.372109f, -0.193851f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.334700f, -0.208800f, -0.918900f }	},
	{	{ -0.795996f, 3.380172f, -0.203407f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.334700f, -0.208800f, -0.918900f }	},
	{	{ -0.073632f, 2.738147f, -0.203408f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.051400f, -0.273200f, -0.960600f }	},
	{	{ -0.082023f, 2.710226f, -0.193851f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.053900f, -0.276300f, -0.959500f }	},
	{	{ -0.205564f, 2.739823f, -0.193851f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.100200f, -0.334000f, -0.937200f }	},
	{	{ -0.200678f, 2.769362f, -0.203408f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.104800f, -0.339900f, -0.934600f }	},
	{	{ 0.208499f, 2.695072f, -0.193851f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.039800f, -0.170300f, -0.984600f }	},
	{	{ 0.080625f, 2.680856f, -0.193851f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.002500f, -0.221200f, -0.975200f }	},
	{	{ 0.082023f, 2.725560f, -0.203408f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.001200f, -0.219900f, -0.975500f }	},
	{	{ 0.206139f, 2.747923f, -0.203408f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.043200f, -0.164300f, -0.985500f }	},
	{	{ -0.795996f, 3.380172f, -0.203407f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.619700f, 0.784900f, 0.000400f }	},
	{	{ -0.796715f, 3.379355f, 0.095252f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.620200f, 0.784500f, 0.000500f }	},
	{	{ -0.719654f, 3.439873f, -0.203407f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.617300f, 0.786700f, 0.000100f }	},
	{	{ -0.719940f, 3.439833f, -0.084823f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.617300f, 0.786700f, 0.000100f }	},
	{	{ -0.315712f, 2.802353f, -0.203408f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.160100f, -0.364200f, -0.917400f }	},
	{	{ -0.330489f, 2.792107f, -0.193851f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.181200f, -0.355600f, -0.916900f }	},
	{	{ -0.464999f, 2.866661f, -0.193851f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.207100f, -0.344700f, -0.915600f }	},
	{	{ -0.444421f, 2.885935f, -0.203408f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.207100f, -0.344700f, -0.915600f }	},
	{	{ -0.485122f, 3.060719f, -0.203408f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.000000f, -1.000000f }	},
	{	{ -0.547091f, 2.998836f, -0.203408f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.000000f, -1.000000f }	},
	{	{ -0.795996f, 3.380172f, -0.203407f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.000000f, -1.000000f }	},
	{	{ -0.719654f, 3.439873f, -0.203407f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.000000f, -1.000000f }	},
	{	{ 0.693876f, 3.466047f, -0.203407f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.612200f, 0.790700f, -0.001500f }	},
	{	{ 0.694812f, 3.465918f, 0.102243f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.612200f, 0.790700f, -0.001500f }	},
	{	{ 0.495917f, 2.884318f, -0.193851f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.130600f, -0.123700f, -0.983700f }	},
	{	{ 0.338391f, 2.732271f, -0.193851f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.074400f, -0.136900f, -0.987800f }	},
	{	{ 0.334290f, 2.808259f, -0.203408f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.094700f, -0.129800f, -0.987000f }	},
	{	{ 0.466010f, 2.930132f, -0.203408f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.136100f, -0.124300f, -0.982900f }	},
	{	{ 0.756112f, 3.417863f, -0.203407f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.000000f, -1.000000f }	},
	{	{ 0.529087f, 2.998859f, -0.203408f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.000000f, -1.000000f }	},
	{	{ 0.469961f, 3.032175f, -0.203408f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.000000f, -1.000000f }	},
	{	{ 0.693876f, 3.466047f, -0.203407f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.000000f, -1.000000f }	},
	{	{ -0.700987f, 2.841589f, -0.185073f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.037900f, 0.024900f, -0.999000f }	},
	{	{ -0.852650f, 2.690489f, -0.193851f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.038300f, 0.025100f, -0.998900f }	},
	{	{ -0.547091f, 2.998836f, -0.203408f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.220500f, -0.205900f, -0.953400f }	},
	{	{ -0.444421f, 2.885935f, -0.203408f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.220500f, -0.205900f, -0.953400f }	},
	{	{ -0.464999f, 2.866661f, -0.193851f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.220500f, -0.205900f, -0.953400f }	},
	{	{ -0.570445f, 2.976655f, -0.193851f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.220500f, -0.205900f, -0.953400f }	},
	{	{ -1.105784f, 3.092098f, -0.193851f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.036300f, 0.023700f, -0.999100f }	},
	{	{ -0.939741f, 3.262032f, -0.183461f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.036300f, 0.023700f, -0.999100f }	},
	{	{ 0.707846f, 2.845913f, -0.183461f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.039600f, 0.031300f, -0.998700f }	},
	{	{ 0.848878f, 2.735892f, -0.193851f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.039600f, 0.031300f, -0.998700f }	},
	{	{ 1.080873f, 3.121086f, -0.193851f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.054700f, 0.036400f, -0.997800f }	},
	{	{ 0.855900f, 2.907496f, -0.193851f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.054700f, 0.036400f, -0.997800f }	},
	{	{ 0.707846f, 2.845913f, -0.183461f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.054700f, 0.036400f, -0.997800f }	},
	{	{ 0.927419f, 3.277071f, -0.184274f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.054700f, 0.036400f, -0.997800f }	},
	{	{ 0.447924f, 2.516523f, -0.188824f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.023100f, 0.043700f, -0.998800f }	},
	{	{ 0.369865f, 2.603428f, -0.183461f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.021700f, 0.039500f, -0.999000f }	},
	{	{ 0.521092f, 2.435064f, -0.193851f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.025000f, 0.039200f, -0.998900f }	},
	{	{ 0.472361f, 2.415704f, -0.193851f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.022100f, 0.047200f, -0.998600f }	},
	{	{ -0.305094f, 2.545525f, -0.186104f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.025800f, -0.101200f, -0.994500f }	},
	{	{ -0.267030f, 2.536960f, -0.186104f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.036900f, -0.120500f, -0.992000f }	},
	{	{ 0.485121f, 2.554438f, -0.188310f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.023400f, 0.042400f, -0.998800f }	},
	{	{ 0.525795f, 2.613758f, -0.186014f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.016200f, 0.029400f, -0.999400f }	},
};
#define _Flag_GothicArch_vertices_
#endif
#ifndef _Flag_GothicArch_indices_
// Index Data follows: Sequential by mesh, Every Three Indices == One Triangle.
const unsigned int Flag_GothicArch_indices[432] =
{
	 0, 1, 2,
	 3, 0, 2,
	 4, 5, 6,
	 7, 4, 6,
	 8, 9, 10,
	 11, 8, 10,
	 12, 13, 14,
	 15, 12, 14,
	 16, 17, 18,
	 19, 16, 18,
	 20, 21, 22,
	 23, 20, 22,
	 24, 25, 26,
	 27, 24, 26,
	 28, 12, 15,
	 29, 28, 15,
	 30, 31, 32,
	 33, 30, 32,
	 34, 35, 36,
	 37, 34, 36,
	 5, 0, 3,
	 6, 5, 3,
	 38, 39, 40,
	 31, 38, 40,
	 41, 42, 12,
	 22, 41, 12,
	 8, 43, 44,
	 9, 8, 44,
	 35, 45, 46,
	 47, 35, 46,
	 48, 49, 50,
	 51, 48, 50,
	 52, 53, 54,
	 55, 52, 54,
	 56, 57, 58,
	 59, 56, 58,
	 60, 61, 62,
	 63, 60, 62,
	 64, 65, 44,
	 43, 64, 44,
	 66, 67, 68,
	 22, 66, 68,
	 69, 70, 71,
	 72, 69, 71,
	 73, 74, 75,
	 76, 73, 75,
	 77, 78, 79,
	 80, 77, 79,
	 51, 50, 53,
	 52, 51, 53,
	 81, 82, 71,
	 70, 81, 71,
	 24, 27, 62,
	 61, 24, 62,
	 83, 84, 85,
	 86, 83, 85,
	 87, 88, 89,
	 90, 87, 89,
	 66, 26, 25,
	 67, 66, 25,
	 91, 92, 93,
	 94, 91, 93,
	 95, 93, 92,
	 96, 95, 92,
	 20, 18, 17,
	 21, 20, 17,
	 16, 19, 79,
	 78, 16, 79,
	 97, 98, 99,
	 100, 97, 99,
	 55, 54, 101,
	 102, 55, 101,
	 28, 23, 22,
	 12, 28, 22,
	 103, 104, 105,
	 106, 103, 105,
	 107, 108, 109,
	 110, 107, 109,
	 111, 112, 113,
	 114, 111, 113,
	 115, 4, 7,
	 116, 115, 7,
	 117, 115, 116,
	 118, 117, 116,
	 119, 120, 121,
	 122, 119, 121,
	 81, 89, 88,
	 82, 81, 88,
	 87, 90, 40,
	 39, 87, 40,
	 123, 124, 125,
	 126, 123, 125,
	 102, 101, 127,
	 128, 102, 127,
	 129, 130, 131,
	 132, 129, 131,
	 133, 134, 135,
	 136, 133, 135,
	 107, 113, 112,
	 108, 107, 112,
	 111, 114, 131,
	 130, 111, 131,
	 119, 110, 109,
	 120, 119, 109,
	 123, 33, 32,
	 124, 123, 32,
	 35, 15, 14,
	 45, 35, 14,
	 137, 11, 10,
	 138, 137, 10,
	 34, 29, 15,
	 35, 34, 15,
	 139, 140, 141,
	 142, 139, 141,
	 137, 138, 143,
	 144, 137, 143,
	 72, 135, 134,
	 69, 72, 134,
	 63, 85, 84,
	 60, 63, 84,
	 58, 145, 146,
	 59, 58, 146,
	 80, 75, 74,
	 77, 80, 74,
	 132, 99, 98,
	 129, 132, 98,
	 147, 148, 149,
	 150, 147, 149,
	 151, 96, 152,
	 151, 59, 153,
	 154, 95, 96,
	 151, 154, 96,
	 42, 155, 13,
	 12, 42, 13,
	 156, 41, 22,
	 68, 156, 22,
	 156, 68, 13,
	 155, 156, 13,
	 157, 56, 59,
	 151, 157, 59,
	 158, 157, 151,
	 152, 158, 151,
	 158, 152, 58,
	 57, 158, 58,
};
#define _Flag_GothicArch_indices_
#endif
// Part of an OBJ_MATERIAL, the struct is 16 byte aligned so it is GPU register friendly.
#ifndef __OBJ_ATTRIBUTES__
typedef struct _OBJ_ATTRIBUTES_
{
	OBJ_VEC3    Kd; // diffuse reflectivity
	float	    d; // dissolve (transparency) 
	OBJ_VEC3    Ks; // specular reflectivity
	float       Ns; // specular exponent
	OBJ_VEC3    Ka; // ambient reflectivity
	float       sharpness; // local reflection map sharpness
	OBJ_VEC3    Tf; // transmission filter
	float       Ni; // optical density (index of refraction)
	OBJ_VEC3    Ke; // emissive reflectivity
	unsigned    illum; // illumination model
}OBJ_ATTRIBUTES;
#define __OBJ_ATTRIBUTES__
#endif
// This structure also has been made GPU register friendly so it can be transfered directly if desired.
// Note: Total struct size will vary depenedening on CPU processor architecture (string pointers).
#ifndef __OBJ_MATERIAL__
typedef struct _OBJ_MATERIAL_
{
	// The following items are typically used in a pixel/fragment shader, they are packed for GPU registers.
	OBJ_ATTRIBUTES attrib; // Surface shading characteristics & illumination model
	// All items below this line are not needed on the GPU and are generally only used during load time.
	const char* name; // the name of this material
	// If the model's materials contain any specific texture data it will be located below.
	const char* map_Kd; // diffuse texture
	const char* map_Ks; // specular texture
	const char* map_Ka; // ambient texture
	const char* map_Ke; // emissive texture
	const char* map_Ns; // specular exponent texture
	const char* map_d; // transparency texture
	const char* disp; // roughness map (displacement)
	const char* decal; // decal texture (lerps texture & material colors)
	const char* bump; // normal/bumpmap texture
	void* padding[2]; // 16 byte alignment on 32bit or 64bit
}OBJ_MATERIAL;
#define __OBJ_MATERIAL__
#endif
#ifndef _Flag_GothicArch_materials_
// Material Data follows: pulled from a .mtl file of the same name if present.
const OBJ_MATERIAL Flag_GothicArch_materials[1] =
{
	{
		{{ 0.210681f, 0.067752f, 0.018038f },
		1.000000f,
		{ 0.500000f, 0.500000f, 0.500000f },
		96.078430f,
		{ 1.000000f, 1.000000f, 1.000000f },
		60.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		1.000000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		2},
		"Flag",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
	},
};
#define _Flag_GothicArch_materials_
#endif
/************************************************/
/*  This section contains the model's structure */
/************************************************/
#ifndef _Flag_GothicArch_batches_
// Use this conveinence array to batch render all geometry by like material.
// Each entry corresponds to the same entry in the materials array above.
// The two numbers provided are the IndexCount and the IndexOffset into the indices array.
// If you need more fine grained control(ex: for transformations) use the OBJ_MESH data below.
const unsigned int Flag_GothicArch_batches[1][2] =
{
	{ 432, 0 },
};
#define _Flag_GothicArch_batches_
#endif
#ifndef __OBJ_MESH__
typedef struct _OBJ_MESH_
{
	const char* name;
	unsigned    indexCount;
	unsigned    indexOffset;
	unsigned    materialIndex;
}OBJ_MESH;
#define __OBJ_MESH__
#endif
#ifndef _Flag_GothicArch_meshes_
// Mesh Data follows: Meshes are .obj groups sorted & split by material.
// Meshes are provided in sequential order, sorted by material first and name second.
const OBJ_MESH Flag_GothicArch_meshes[1] =
{
	{
		"default",
		432,
		0,
		0,
	},
};
#define _Flag_GothicArch_meshes_
#endif
